AWSTemplateFormatVersion: '2010-09-09'
Description: 'Example Lambda zip copy'
Parameters:
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    Default: zipfileuploaddeploy
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    Default: prefix/
    Type: String
  ZipFileName:
    AllowedPattern: ^[\w,\s-]+\.[A-Za-z]{3}$
    Default: lambda.zip
    Type: String
Resources:
  LambdaZipsBucket:
    Type: AWS::S3::Bucket
  CopyZips:
    Type: Custom::CopyZips
    Properties:
      ServiceToken: !GetAtt 'CopyZipsFunction.Arn'
      DestBucket: !Ref 'LambdaZipsBucket'
      SourceBucket: !Ref 'QSS3BucketName'
      Prefix: !Ref 'QSS3KeyPrefix'
      Objects:
        - !Sub functions/packages/CleanupPV/${ZipFileName}
  CopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub 'arn:aws:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub 'arn:aws:s3:::${LambdaZipsBucket}/${QSS3KeyPrefix}*'
  CopyZipsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python3.7
      Role: !GetAtt 'CopyZipsRole.Arn'
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse
          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  print(('copy_source: %s' % copy_source))
                  print(('dest_bucket = %s'%dest_bucket))
                  print(('key = %s' %key))
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,
                        Key=key)
          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)
          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                        / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              print(('Received event: %s' % json.dumps(event)))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)

  GameDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: gameDB
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: game_id
          AttributeType: S
      KeySchema:
        - AttributeName: game_id
          KeyType: HASH

  PlayerDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: playerDB
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: player_id
          AttributeType: S
      KeySchema:
        - AttributeName: player_id
          KeyType: HASH





  GeneralRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess


  # LAMBDA FUNCTIONS

  ## List available games

  ListAvailableGames:  
    DependsOn: CopyZips
    Type: AWS::Lambda::Function
    Properties:
      Description: List Available games   # Set description
      Handler: listAvailableGames.lambda_handler   # Set file.function
      Runtime: python3.7
      Role: !GetAtt 'GeneralRole.Arn'
      Timeout: 300
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/CleanupPV/${ZipFileName}'

  ApiGatewayResourceListAvailableGames:
    DependsOn: ListAvailableGames   # Set to Lambda resource
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestBubbleAPI.RootResourceId
      PathPart: 'availableGames'   # Set path Name
      RestApiId: !Ref ApiGatewayRestBubbleAPI


  ApiGatewayMethodListAvailableGames:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt ApiGatewayIamRoleBubble.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListAvailableGames.Arn}/invocations'   # Set to lambda function
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
      OperationName: 'GetListAvailableGames'   # Set operation name
      ResourceId: !Ref ApiGatewayResourceListAvailableGames  # set to Resource
      RestApiId: !Ref ApiGatewayRestBubbleAPI

  ## ModifyGame

  ModifyGame:  
    DependsOn: CopyZips
    Type: AWS::Lambda::Function
    Properties:
      Description: modify game create, delete, start game   # Set description
      Handler: modifyGame.lambda_handler   # Set file.function
      Runtime: python3.7
      Role: !GetAtt 'GeneralRole.Arn'
      Timeout: 300
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/CleanupPV/${ZipFileName}'

  ApiGatewayResourceModifyGame:
    DependsOn: ModifyGame   # Set to Lambda resource
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestBubbleAPI.RootResourceId
      PathPart: 'modifyGame'   # Set path Name
      RestApiId: !Ref ApiGatewayRestBubbleAPI

  ApiGatewayMethodModifyGame:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET   #Modify to needs
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt ApiGatewayIamRoleBubble.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ModifyGame.Arn}/invocations'   # Set to lambda function
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
      OperationName: 'PostModifyGame'   # Set operation name
      ResourceId: !Ref ApiGatewayResourceModifyGame  # set to Resource
      RestApiId: !Ref ApiGatewayRestBubbleAPI
  
  ## GetGameStatus

  GetGameStatus:  
    DependsOn: CopyZips
    Type: AWS::Lambda::Function
    Properties:
      Description: get game status  # Set description
      Handler: getGameStatus.lambda_handler   # Set file.function
      Runtime: python3.7
      Role: !GetAtt 'GeneralRole.Arn'
      Timeout: 300
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/CleanupPV/${ZipFileName}'

  ApiGatewayResourceGetGameStatus:
    DependsOn: GetGameStatus   # Set to Lambda resource
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestBubbleAPI.RootResourceId
      PathPart: 'getGameStatus'   # Set path Name
      RestApiId: !Ref ApiGatewayRestBubbleAPI

  ApiGatewayMethodGetGameStatus:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET   #Modify to needs
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt ApiGatewayIamRoleBubble.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetGameStatus.Arn}/invocations'   # Set to lambda function
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
      OperationName: 'GetGameStatus'   # Set operation name
      ResourceId: !Ref ApiGatewayResourceGetGameStatus  # set to Resource
      RestApiId: !Ref ApiGatewayRestBubbleAPI


  ## Common for all Lambdas

  ApiGatewayDeploymentBubble:
    Type: AWS::ApiGateway::Deployment
    DependsOn: [ApiGatewayMethodListAvailableGames, ApiGatewayMethodModifyGame, ApiGatewayMethodGetGameStatus]   #Add all methods
    Properties:
      Description: Bubble Deployment v2
      RestApiId: !Ref ApiGatewayRestBubbleAPI

  ApiGatewayIamRoleBubble:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: [!GetAtt ListAvailableGames.Arn, !GetAtt ModifyGame.Arn, !GetAtt GetGameStatus.Arn] #Add all lambdas


  # API GATEWAY

  ApiGatewayRestBubbleAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: HEADER
      Description: API for Bubble
      EndpointConfiguration:
        Types:
          - EDGE
      Name: bubble-game-api

  # Resource for each lambda


  ApiGatewayModelBubble:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref ApiGatewayRestBubbleAPI
      Schema: {}

  ApiGatewayStageBubble:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeploymentBubble
      Description: Dev enviorment for Bubble v2  #update if new lambda/method has been deployed
      RestApiId: !Ref ApiGatewayRestBubbleAPI
      StageName: 'DEV'

